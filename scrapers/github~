xqueryparser.xq  
           README.md
library module: http://github.com/jpcs/xqueryparser.xq



xqueryparser.xq

An parser for XQuery 3.0 and MarkLogic extensions.

Author:  John Snelson    Feb 17, 2012
Version:  0.1 


Table of Contents

Functions: parse#1


Functions


 parse#1

parse($module as xs:string
) as  element()


Parses the XQuery module in the string argument. The module string  is returned marked up in elements, with attributes adding statically  analysed values like unescaped string values, and lexical QNames  resolved to expanded QNames.   


Params

$module as  xs:string: XQuery module passed as a string

Returns

 element(): A marked up copy of the XQuery module, or an error element detailing the parse error encountered.
Generated by xquerydoc
metrics  
           README.md
Metrics

Capturing JVM- and application-level metrics. So you know what's going on.

For more information, please see the documentation.


License

Copyright (c) 2010-2012 Coda Hale, Yammer.com

Published under Apache Software License 2.0, see LICENSE
opensiddur  
           READMEThis is the Open Siddur Project's git repository.

The Open Siddur Project aims to produce a free software toolkit for making high-quality custom Jewish liturgical books such as haggadot, siddurim, and bentchers that can be displayed on screen or printed to paper. The project's goals include producing a reliable source text, enabling personalization and customization of the text for local rites and customs and selective inclusion of multilingual translations, transliterations, instructions, notes, and commentaries.

To accomplish it, we are to creating a collaborative publishing platform built around a social network of individuals passionate about the siddur, some wanting to craft their own siddur, others wanting to use it as an educational tool, or for sharing prayers, translations, commentaries, art, and layout templates for new siddurim. The mission of the Open Siddur Project is further described in our Mission Statement (http://opensiddur.org/development/mission/) and encompasses the values of pluralism (acceptance for the diversity of Jewish cultural expression), historical awareness (the text of the siddur is an aggregate of thousands of years of creatively inspired works), and individual freedom.

The coding project is divided into three major parts:
* Schema: A defined XML format for storing liturgical materials, based on the Text Encoding Initiative (TEI) XML schema.
* Back-end: A database and REST API for storing and accessing siddur data.
* Front-end: The web-based editing application.
Volunteer coders are always welcome. We are, in particular, looking for web/mobile user interface programmers.

This site serves as the project's code repository, code documentation, and issue tracker.

Current development progress is being tracked on the github wiki and in the issue tracker. 

Many of the texts that have been contributed to date are distributed at http://opensiddur.org

Comments and bug reports from anyone are welcome. 

Please join our discussion lists:
* Read-only announcements (low traffic): http://groups.google.com/group/opensiddur-announce
* General discussion: http://groups.google.com/group/opensiddur-talk
* Technical discussion: http://groups.google.com/group/opensiddur-tech
* Commit logs: http://groups.google.com/group/opensiddur-dev

You can also follow us on Twitter (@opensiddur) and Facebook (http://www.facebook.com/home.php#/group.php?gid=107922647745)

For history prior to version 0.4.1, see our old Subversion repository at http://jewishliturgy.googlecode.com

        
Brainfuck-Processor  
           READMEBrainfuck-Processor
===================

The goal of this project is to create a processor able to execute Brainfuck.
Written in VHDL for a FPGA it is not suppost to interpret Brainfuck but to
actually execute it as bytecode, much like an Intel Processor executes Assembler.

Due to our noobness in hardware programming the code is neither nice, clean or working.
It is a pain to use memory if you have to build a state mashine to acces it.
But hardware people do know how to write documentation, maybe not good ones but
they are really really long and full of information.

All info available to us is checked in with the project.

        
junit  
           README.md
JUnit 4

JUnit is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks.

For more information, please visit:

Wiki
Download and Install guide
Getting Started

neocomplcache  
           README.md
neocomplcache



Description

Neocomplcache performs keyword completion by making a cache of keywords in
a buffer. I implemented it because unlike the Vim builtin keyword completion,
neocomplcache can be customized flexibly. Unfortunately, neocomplcache may use
more memory than other plugins.


Installation

Extract the file and put files in your Vim directory
(usually ~/.vim/ or Program Files/Vim/vimfiles on Windows).
Execute |:NeoComplCacheEnable| command or
let g:neocomplcache_enable_at_startup = 1
in your .vimrc. Not in .gvimrc(_gvimrc)!

Caution

Because all variable names were changed in neocomplcache Ver.5, it is not
backwards compatible. If you want to upgrade, you should use the following
script from Mr.thinca.

http://gist.github.com/422503

Snippets feature(snippets_complete source) was splitted from Ver.7.
If you used it, please install snippets_complete source manually.

https://github.com/Shougo/neocomplcache-snippets-complete


Screen shots


Quick match




Snippet completion like snipMate.




Original filename completion.




Register completion.




Omni completion.




Completion with vimshell(http://github.com/Shougo/vimshell).




Vim completion



Setting examples

" Disable AutoComplPop. Comment out this line if AutoComplPop is not installed.
let g:acp_enableAtStartup = 0
" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion, which require computational power and may stall the vim. 
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

zinc  
           README.md
Zinc HTTP Components

Zinc HTTP Components is an open-source Smalltalk framework 
to deal with the HTTP networking protocol.

http://zn.stfx.eu


Please read the Zinc HTTP Components paper

Sven Van Caekenberghe 

MIT Licensed
Rosella  
           README.md
About Rosella

Rosella is a collection of modular building-block libraries, each of which
implements a particular family of patterns, best practices, or other useful
utilities.

Rosella is not a framework and is not monolithic. Rosella is offered as a
collection of individual libraries with very few dependencies between them.
The goal is to be able to provide small features to programmers who want them
without burdening anybody with unwanted overhead.

For complete details and documentation about Rosella and its component
libraries, see the Rosella website


Version and Release History:

Current Rosella Version: 1 (23 April 2011) For Parrot 3.3

See the file VERSION for detailed version information about each individual
library.


Getting Rosella Source

Get a copy of the latest Rosella code from the Git repository with the
following command:

git clone https://github.com/Whiteknight/Rosella.git Rosella



Building Rosella From Source

To build Rosella you need to use Winxed:

winxed setup.winxed build
winxed setup.winxed test
winxed setup.winxed install


Winxed is a language compiler for Parrot with a syntax similar to JavaScript.
Rosella libraries are written in Winxed, although they should be usable by
any software written in any language targetting Parrot.

If you update the source code of your local Rosella git repo and want to build
the updated version, make sure to run the clean target before recompiling to
avoid strange errors caused by partial recompilation:

winxed setup.winxed clean build test install



Using Rosella Release

The Rosella release tarball ships with all the .pir files from the
development build, and all the necessary utilities to build and install
Rosella with or without Winxed. With the release tarball extracted to a
directory, you can use the following sequence to build, test and install
Rosella:

parrot setup.pir build
parrot setup.pir test
parrot setup.pir install



Component Libraries

Rosella is composed of several libraries. Some are relatively mature, stable,
usable, and tested. Some are still young, in development, or unstable. For
details about all libraries, what they do, and how to use them, see the
Rosella website.


Stable Libraries

These libraries are considered stable enough for most uses. These are all
tested and documented.

 Core (rosella/core.pbc)
 Action (rosella/action.pbc)
 Container (rosella/container.pbc)
 Test (rosella/test.pbc)
 TAP Harness (rosella/tap_harness.pbc)
 Proxy (rosella/proxy.pbc)
 Mock Object (rosella/mockobject.pbc)
 Event (rosella/event.pbc)
 Winxed (rosella/winxed.pbc)
Memoize (rosella/memoize.pbc)
Query (rosella/query.pbc)
FileSystem (rosella/filesystem.pbc)
Path (rosella/path.pbc)
String (rosella/string.pbc)

Libraries in Development

There are a number of additional libraries in earlier stages of development
which are not considered to be "stable". These libraries are located in the
directory src/unstable/. Libraries which are built as part of the
setup.winxed command and which are listed in the VERSION file may be
usable, but are not considered stable and are subject to be changed or even
deleted on a whim.


Hacking

Rosella is open source software, and is always open to new contributors and
contributions. You can report bugs or request new features at the
Rosella Issue Tracker. You can also create forks and submit pull
requests on Github.


Using Rosella

functions prefixed with "private_", "protected_" or "internal_" are intended
for use by Rosella only, and should not be used in by external code. These
functions are not part of the external interface, are explicitly not tested,
and no guarantees are made about their performance or their continued
existance.

If you need a feature which is not exposed by the current public API, you can
request a feature addition or put together a patch to add it.


Influences

Rosella is influenced by a number of other libraries and technologies. A list
of contributors and specific points of influence will be listed in the
"CREDITS" file.
parcom  
           READMEparcom -- a parser combinator library

This is a simple parser combinator library based on code by Chris
Okasaki, Robert Harper, Frank Pfenning and Tom Murphy VII, with
utility modules inspired by Haskell's parsec library and some error
reporting added.

Currently it uses their stream and file position implementation: this
should be removed once we get a proper extended standard library.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.

At this point, the library is supported and developed by Filip
Sieczkowski.
        
shotwell  
           README
    Shotwell Photo Manager
    ----------------------
    
  * Introduction
    
    Shotwell is a digital photo manager designed for the GNOME desktop
    environment.  It allows you to import photos from disk or camera,
    organize them in various ways, view them in full-window or fullscreen
    mode, and export them to share with others.
    
    Visit http://www.yorba.org/shotwell to read about the current state of
    Shotwell's development and to make sure you're running the latest version.
    

  * Installation & Licensing
    
    Please consult the INSTALL and COPYING files for more information.
    

  * Quick Start
    
    There are three ways to import photos: via drag-and-drop, from a digital
    camera, and from the File menu.
    
    * Drag-and-drop: Simply drag photos from your file manager and drop them
    onto the Shotwell window.  You may drag files or directories.  The photos
    will be imported into the library.
    
    * Camera: Connect your digital camera to your computer.  Shotwell will 
    detect it and list it in the sidebar.  When you select the camera, Shotwell 
    will load previews of each photo.  You may choose specific photos to 
    import or to import them all.
    
    Shotwell uses gPhoto to communicate with digital cameras.  If your camera 
    does not appear in Shotwell's sidebar or there is a problem importing
    photos, visit http://www.gphoto.org to see if it is supported.
    
    * File menu: Select File -> Import From Folder ... and select a directory
    from the chooser dialog box.  Shotwell will scan the directory and all
    sub-directories for photo files and automatically import them.
    
    Once your photos are in Shotwell's library, you can view, edit, and export
    them.  More features are planned, so check http://www.yorba.org/shotwell
    regularly for updates.

    
  * Contacting Yorba
    
    Yorba:                      http://www.yorba.org
    Shotwell project page:      http://www.yorba.org/shotwell
    Shotwell documentation:     http://www.yorba.org/shotwell/help
    
    We also encourage you to join the Shotwell mailing list.  Send an email
    with a subject: line of "subscribe" (no quotes) to
    shotwell-request@lists.yorba.org.
    
    
    
    Copyright 2009-2012 Yorba Foundation


        
yeoman  
           readme.md
Welcome, Friend! 



What am I?

Yeoman is a robust and opinionated client-side stack, comprising tools and frameworks that can help developers quickly build beautiful web applications. We take care of providing everything needed to get started without any of the normal headaches associated with a manual setup.



Yeoman is fast, performant and is optimized to work best in modern browsers.

For more information about the project, see yeoman.io.


Installation

Try the audit script to see what you need in place:

curl -L get.yeoman.io | bash


You can follow its guidance or simply walk through the installation procedure.

Yeoman requires Node 0.8.x


Issue submission

Make sure you've read the issue submission guidelines before you open a new issue.


Documentation

For more information on Yeoman, please read our complete documentation.

Yeoman supports a powerful set of high-level commands. These include:

yeoman init      # Initialize and scaffold a new project using generator templates
yeoman build     # Build an optimized version of your app, ready to deploy
yeoman server    # Launch a preview server which will begin watching for changes
yeoman test      # Run a Mocha test harness in a headless PhantomJS

yeoman install   # Install a package from the client-side package registry
yeoman uninstall # Uninstall the package
yeoman update    # Update a package to the latest version
yeoman list      # List the packages currently installed
yeoman search    # Query the registry for matching package names
yeoman lookup    # Look up info on a particular package


A common initial workflow with Yeoman might be:

yeoman init        # Invoke the most basic application scaffold (Bootstrap, Boilerplate etc.)
yeoman server      # Fire off a file watch/server process which also places an
                   # intermediate build of your project in `temp`
yeoman build       # Build your project, creating an optimized version in a new `dist` directory
yeoman server:dist # Serve up the production-ready version of your application


Some more examples of how to use our commands include:

# Generators for MVC/MV* Frameworks
yeoman init bbb                          # Backbone Boilerplate generator scaffold
yeoman init ember                        # Create a "Hello World" Yeoman project with the Ember Starter Kit
yeoman init backbone                     # Backbone-Rails generator scaffold
yeoman init angular                      # Invoke the AngularJS generator scaffold
yeoman init angular:controller           # Invoke the AngularJS Controller sub-generator

# Generator for Chrome Apps
yeoman init chromeapp

# Additional server profiles
yeoman server:app                        # Serves up an intermediate build of your application
yeoman server:dist                       # Serves up a production build, if you've built before
yeoman server:test                       # Serves your test suite

# Package management
yeoman search jquery                       # Lookup jQuery in the Bower registry
yeoman install jquery underscore [depName] # Install a dependency or dependencies
yeoman update jquery                       # Update a specific dependency (e.g jquery)




We also have extended documentation available for those more interested in the Yeoman internals.


Bower

Yeoman uses Bower as its package manager. The Bower registry is currently being populated, you may find that certain packages work and others do not. We are actively working with the Bower team to resolve this issue and hope to have fully functional packages in place upon launch.


Browser Support

Modern browsers (latest version of Chrome, Safari, Firefox, Opera and IE10)
Chrome on Android
Mobile Safari

Platform Support

Yeoman 1.0 will support OS X, Linux and FreeBSD. We will be aiming to bring in support for Windows in a future version of the project.


Contribute

See the contributing docs


About

Yeoman is an open-source project by Google which builds on top of Grunt and node-build-script. We utilize a number of useful open-source solutions including:

Twitter Bootstrap
HTML5 Boilerplate
Modernizr
Twitter Bower
Node.js
NPM
Compass
Socket.IO
CoffeeScript
Mocha
Jasmine
PhantomJS
And more...

Version 1 of the project features the combined efforts of:

Paul Irish
Addy Osmani
Mickael Daniel
Sindre Sorhus
Eric Bidelman
and other developers.


License

Yeoman is released under a BSD license.
ruby-build  
           README.md
ruby-build

ruby-build is an rbenv plugin
that provides an rbenv install command to compile and install
different versions of Ruby on UNIX-like systems.

You can also use ruby-build without rbenv in environments where you
need precise control over Ruby version installation.


Installation


Installing as an rbenv plugin (recommended)

Installing ruby-build as an rbenv plugin will give you access to the
rbenv install command.

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build


This will install the latest development version of ruby-build into
the ~/.rbenv/plugins/ruby-build directory. From that directory, you
can check out a specific release tag. To update ruby-build, run git
pull to download the latest changes.


Installing as a standalone program (advanced)

Installing ruby-build as a standalone program will give you access to
the ruby-build command for precise control over Ruby version
installation. If you have rbenv installed, you will also be able to
use the rbenv install command.

git clone git://github.com/sstephenson/ruby-build.git
cd ruby-build
./install.sh


This will install ruby-build into /usr/local. If you do not have
write permission to /usr/local, you will need to run sudo
./install.sh instead. You can install to a different prefix by
setting the PREFIX environment variable.

To update ruby-build after it has been installed, run git pull in
your cloned copy of the repository, then re-run the install script.


Installing with Homebrew (for OS X users)

Mac OS X users can install ruby-build with the
Homebrew package manager. This
will give you access to the ruby-build command. If you have rbenv
installed, you will also be able to use the rbenv install command.

This is the recommended method of installation if you installed rbenv
 with Homebrew.

brew install ruby-build


Or, if you would like to install the latest development release:

brew install --HEAD ruby-build



Usage


Using rbenv install with rbenv

To install a Ruby version for use with rbenv, run rbenv install with
the exact name of the version you want to install. For example,

rbenv install 1.9.3-p327


Ruby versions will be installed into a directory of the same name
under ~/.rbenv/versions.

To see a list of all available Ruby versions, run rbenv install --list.
You may also tab-complete available Ruby
versions if your rbenv installation is properly configured.


Using ruby-build standalone

If you have installed ruby-build as a standalone program, you can use
the ruby-build command to compile and install Ruby versions into
specific locations.

Run the ruby-build command with the exact name of the version you
want to install and the full path where you want to install it. For
example,

ruby-build 1.9.3-p327 ~/local/ruby-1.9.3-p327


To see a list of all available Ruby versions, run ruby-build
--definitions.

Pass the -v or --verbose flag to ruby-build as the first
argument to see what's happening under the hood.


A note about Ruby 2.0 and Mac OS X

Ruby 2.0 is incompatible with the version of OpenSSL bundled with Mac
OS X. To work around this issue, install OpenSSL using Homebrew
instead:

brew install openssl


Then set the CONFIGURE_OPTS environment variable when you build
Ruby:

CONFIGURE_OPTS=--with-openssl-dir=`brew --prefix openssl` rbenv install 2.0.0-preview1



Custom definitions

Both rbenv install and ruby-build accept a path to a custom
definition file in place of a version name. Custom definitions let you
develop and install versions of Ruby that are not yet supported by
ruby-build.

See the ruby-build built-in
definitions
as a starting point for custom definition files.


Special environment variables

You can set certain environment variables to control the build
process.


TMPDIR sets the location where ruby-build stores temporary files.

RUBY_BUILD_BUILD_PATH sets the location in which sources are
downloaded and built. By default, this is a subdirectory of
TMPDIR.

RUBY_BUILD_CACHE_PATH, if set, specifies a directory to use for
caching downloaded package files.

RUBY_BUILD_MIRROR_URL overrides the default mirror URL root to one
of your choosing.

RUBY_BUILD_SKIP_MIRROR, if set, forces ruby-build to download
packages from their original source URLs instead of using a mirror.

CC sets the path to the C compiler.

CONFIGURE_OPTS lets you pass additional options to ./configure.

MAKE_OPTS (or MAKEOPTS) lets you pass additional options to
make.

Checksum verification

If you have the md5, openssl, or md5sum tool installed,
ruby-build will automatically verify the MD5 checksum of each
downloaded package before installing it.

Checksums are optional and specified as anchors on the package URL in
each definition. (All bundled definitions include checksums.)


Package download mirrors

ruby-build will first attempt to download package files from a mirror
hosted on Amazon CloudFront. If a package is not available on the
mirror, if the mirror is down, or if the download is corrupt,
ruby-build will fall back to the official URL specified in the
defintion file.

You can point ruby-build to another mirror by specifying the
RUBY_BUILD_MIRROR_URL environment variable--useful if you'd like to
run your own local mirror, for example. Package mirror URLs are
constructed by joining this variable with the MD5 checksum of the
package file.

If you don't have an MD5 program installed, ruby-build will skip the
download mirror and use official URLs instead. You can force
ruby-build to bypass the mirror by setting the
RUBY_BUILD_SKIP_MIRROR environment variable.

The official ruby-build download mirror is sponsored by
37signals.


Package download caching

You can instruct ruby-build to keep a local cache of downloaded
package files by setting the RUBY_BUILD_CACHE_PATH environment
variable. When set, package files will be kept in this directory after
the first successful download and reused by subsequent invocations of
ruby-build and rbenv install.

The rbenv install command defaults this path to ~/.rbenv/cache, so
in most cases you can enable download caching simply by creating that
directory.


Keeping the build directory after installation

Both ruby-build and rbenv install accept the -k or --keep
flag, which tells ruby-build to keep the downloaded source after
installation. This can be useful if you need to use gdb and
memprof with Ruby.

Source code will be kept in a parallel directory tree
~/.rbenv/sources when using --keep with the rbenv install
command. You should specify the location of the source code with the
RUBY_BUILD_BUILD_PATH environment variable when using --keep with
ruby-build.


Getting Help

Please see the ruby-build
wiki for solutions to
common problems.

If you can't find an answer on the wiki, open an issue on the issue
tracker. Be sure to
include the full build log for build failures.


License

(The MIT License)

Copyright (c) 2012 Sam Stephenson

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
git-achievements  
           READMEGit-Achievements records all of the achievements you acquire while using Git.

There are over 40 achievement, most with different levels to be achieved.
After a git command is executed if a new achievement is unlocked
git-achievements will display a message on the console for your enjoyment:

********************************************************************************
                            Git Achievement Unlocked!                            

                                    Caretaker                                    
                    Added a .gitignore file to a repository.                    
********************************************************************************


GitHub Pages
------------

A log of all of your achievements is kept locally, but you can also publish
it to GitHub pages so you can share your achievements (and there is a rss
feed so people can track your achievements).

For example here is the project maintainer's achievements page: http://icefox.github.com/git-achievements

If you are viewing a forked version of git-achievements you want to replace icefox
with the github user account you want to see like so:

http://<username>.github.com/git-achievements

To push your achievements to GitHub first fork the project on GitHub,
clone *your* repository and set the following config to true:

git config --global achievement.upload "true"

When an achievement is unlocked the index.html file will be overwritten,
committed and then a 'git push origin' will be executed.


Install
-------
Add git-achievements to your path and alias git to git-achievements

For example add the following to the end of your ~/.bash_profile

export PATH="$PATH:~/git/git-achievements"
alias git="git-achievements"

You can get your first achievement by running

    git achievements --help

        
fpga-hdl  
           README
        
bash-it  
           README.md
Bash it

Bash it is a mash up of my own bash commands and scripts, other bash stuff I have found.

(And a shameless ripoff of oh-my-zsh. :)

Includes autocompletion, themes, aliases, custom functions, a few stolen pieces from Steve Losh, and more.


Install

Check a clone of this repo: git clone http://github.com/revans/bash-it.git ~/.bash_it

Run ~/.bash_it/install.sh (it automatically backs up your ~/.bash_profile)
Edit your ~/.bash_profile file in order to customize bash-it.
NOTE:
The install script will also prompt you asking if you use Jekyll.
This is to set up the .jekyllconfig file, which stores info necessary to use the Jekyll plugin.


Help Screens

bash-it show aliases        # shows installed and available aliases
bash-it show completions    # shows installed and available completions
bash-it show plugins        # shows installed and available plugins
bash-it help aliases        # shows help for installed aliases
bash-it help completions    # shows help for installed completions
bash-it help plugins        # shows help for installed plugins



Your Custom scripts, aliases, and functions

For custom scripts, and aliases, just create the following files (they'll be ignored by the git repo):

aliases/custom.aliases.bash
lib/custom.bash
plugins/custom.plugins.bash
Anything in the custom directory will be ignored, with the exception of custom/example.bash.


Themes

There are a few bash it themes.  If you've created your own custom prompts, I'd love it if you shared with everyone else!  Just submit a Pull Request to me (revans).


Help out

I think everyone has their own custom scripts accumulated over time.  And so, following in the footsteps of oh-my-zsh, bash it is a framework for easily customizing your bash shell. Everyone's got a custom toolbox, so let's start making them even better, as a community!

Send me a pull request and I'll merge it as long as it looks good. If you change an existing command, please give an explanation why. That will help a lot when I merge your changes in.

Thanks, and happing bashing!


Contributors

List of contributors

